namespace EAD.Cryptography.ThexCS
{
    using System;
    using System.Security.Cryptography;
    using System.Text;

    public class Tiger : HashAlgorithm
    {
        private long a;
        private long b;
        private long[] block = new long[8];
        private const int BLOCKSIZE = 0x40;
        private byte[] buf = new byte[0x40];
        private long c;
        private long lLen;
        private int nBufPos;
        private const int PASSES = 3;
        private static long[] T;

        static Tiger()
        {
            long[] numArray = null;
            numArray = new long[] { 
                0x2aab17cf7e90c5eL, -6034178070669973268L, 0x72cd5be30dd5fcd3L, 0x6d019b93f6f97f3aL, -3631738584360316525L, 0x7573a1c9708029e2L, -5664346993730092093L, 0x46883eee04915870L, -1536603760329757466L, -4232985935611735204L, 0x4ce754918ddec47cL, 0xaa2f4dfdc0df40cL, 0x10b76f18a74dbefaL, -4121719295987045526L, 0x13726121572fe2ffL, 0x1a488c6f199d921eL, 
                0x4bc9f9f4da0007caL, 0x26f5e6f6e85241c7L, -8822417684582283338L, 0x4f1885c5c99e8c92L, -2914262034798377397L, -8199292901130911363L, 0x69cf6827373063c1L, -5330070367527189138L, 0x7d820e760e76b5eaL, 0x645c9cc6f07fdc42L, -4667804575905660192L, 0x5f6b343c9d2e7d04L, -954047427515838778L, 0x6c0ed85f7254bcacL, 0x71592281a4db4fe5L, 0x1967fa69ce0fed9fL, 
                -192929137551915557L, -4000909680243679221L, -8790383730744944306L, -6559119868654993229L, -8046943608939121133L, -2635222011098072079L, 0x18beea7a7a370f57L, 0x37117ca50b99066L, 0x6ab30a9774424a35L, -799055769434250085L, 0x7739db07061ccae1L, -2813706756098348539L, -4803442773389201549L, 0x45faed5843b0bb28L, 0x1c813d5c11bf1f83L, -8434990628116389527L, 
                0x33ee18a487ad9999L, 0x3c26e8eab1c94410L, -5399798173115342087L, 0x141eef310ce6123bL, -259597992345095852L, -2299784421946890745L, -8624947886301142065L, -7850603641235491331L, 0x35638d754e9a2b00L, 0x4085fccf40469dd5L, -4273499526689310132L, -3840742565288711634L, 0x2860971a6b943fcdL, 0x3dde6ee212e30446L, 0x6222f32ae01765aeL, 0x5d550bb5478308feL, 
                -6201551736110472662L, -4372530048007926361L, 0x1105586d9c867c84L, -2522035007050864557L, -3676115808446124170L, -4975751036383735295L, -1831728144282101387L, -7732658914112356844L, 0x6a7d1a32823c958L, 0x6f95fe5130f61119L, -2798227069691230528L, -1334228551670664750L, 0x79746d6e6518393eL, 0x5ba419385d713329L, 0x7c1ba6b948a97564L, 0x31987c197bfdac67L, 
                -2419519573825602302L, 0x581c49fed002d64dL, -2501945979441900175L, -6177453506703404958L, -7885857697280165792L, 0x48161bbacaab94d9L, 0x63912430770e6f68L, 0x6ec8a5e602c6641cL, -8707669106532426453L, 0x2cda6b42034b701bL, -5747376245209101971L, -2231459388012946321L, 0x2b3180c7eb51b255L, -2336602742119691332L, 0x5c68c8c0a632f3baL, 0x5504cc861c3d0556L, 
                -6070952467612144753L, 0x41848b0ab3baceb4L, -5533619424469951182L, -4853025588084287359L, 0x24f6ec65b528d56cL, 0xce1512e90f4524aL, 0x4e9dd79d5506d35aL, 0x258905fac6ce9779L, 0x2019295b3e109b33L, -528812816973409076L, 0x2924f2f934417eb0L, 0x3993357d536d1bc4L, 0x38a81ac21db6ff8bL, 0x47c4fbf17d6016bfL, 0x1e0faadd7667e3f5L, 0x7abcff62938beb96L, 
                -6373247044080797239L, -8133614489572350707L, 0x61e48eae27121a91L, 0x4d62f7ad31859808L, -1374825740467639573L, -734453569254161202L, -705972172313107935L, -6688726126811769884L, -7468621655906046812L, -3527580439205474383L, -6956282119872554589L, -6281089153129775081L, 0xbd7ba3ebb5dc726L, -1924221946255713479L, 0x1d7a3afd6c478063L, 0x519ec608e7669eddL, 
                0xe5715a2d149aa23L, 0x177d4571848ff194L, -1245985052454466526L, 0xf5e5ca13a6e2ec2L, -9211670503851965599L, -5975256720516651978L, 0xd5df1a94ccf402fL, 0x3e8bd948bea5dfc8L, -6511972687387035778L, -6714534832456272315L, 0x66fd9e525e81a082L, 0x2e0c90ce7f687a49L, -4402061108394378299L, 0x1bce509745fL, 0x423777bbe6dab3d6L, -3357965141731676491L, 
                -6811660122601107496L, 0x2d11284a2b16affcL, -1009844908434318049L, 0x73ecc25dcb920adaL, -5881406294935394735L, -7574869783018555510L, 0x5a9a381f2fe7870fL, -3049672598698961616L, -3303981966096002009L, 0x65977b70c7af4631L, -7351974990356818097L, 0x233f30bf54e1d143L, -7307523792611951465L, 0x5470554ff334f9a8L, 0x166acb744a4f5688L, 0x70c74caab2e4aeadL, 
                -1094214848903295726L, 0x57b82a89684031d1L, -1163799684465161365L, 0x2fbd12e969f2f29aL, -7218302546559918104L, 0x3f9b0404d6085a06L, 0x4940c1f3166cfe15L, 0x9542c4dcdf3defbL, -5420889727701263133L, -3948047341652367807L, 0x3417f8a68ed3b63fL, -5185515461782971584L, -460252340867529358L, 0x18c0614f8fcb95dL, 0x1b14accd1a3acdf3L, -8875343681432095955L, 
                -4493729248843343338L, 0x430a7220bf1a82b8L, -5224728565293047538L, 0x5ef4bd9f3cd05e9dL, -7111193868311747516L, -2729919277420993032L, -5582278241003401657L, -126421769187551098L, -4035721366655415313L, -1986169280154305277L, 0x3732fd469a4c57dcL, 0x7ef700a07cf1ad65L, 0x59c64468a31d8859L, 0x762fb0b4d45b61f6L, 0x155baed099047718L, 0x68755e4c3d50baa6L, 
                -1647949680688450337L, 0x2addbf532eac95f4L, 0x32ae3909b4bd0109L, -8985256062000155568L, -423165018983337331L, -7032056788937726985L, 0x446d288c4ae8d7fL, 0x7b4cc524e169785bL, 0x21d87f0135ca1385L, -3550173447755953499L, 0x272e2b66580796beL, 0x3612264125c2b0deL, 0x57702bdad1efbb2L, -3117973570538943511L, -7973569017697024389L, -8368763565314219996L, 
                0x603c8156f49f68edL, -589348163057397487L, -7554853961030558080L, -6878676038788161577L, -3798065817641571893L, -9101961441510934879L, -4559443103670756675L, -7665374195348870830L, -8336074436196531783L, 0x3acaaf8f056338f0L, 0x7b43f50627a6778L, 0x4a44ab49f5eccc77L, 0x3bc3d6e4b679ee98L, -7151482210676895604L, 0x4406c00b206bc8a0L, -9033789479800328823L, 
                0x67e366b35c3c432cL, -5105994143555176462L, 0x56ab2779d884271dL, -4718679834244078161L, -325273111308121687L, 0x6bdbe0e76d48e7d4L, 0x8df828745d9179eL, 0x22ea6a9add53bd34L, -2058685867725021174L, 0x7f805d1b8cb750eeL, -5771987833248487369L, -2125811817212952004L, -3204735567712096048L, -3393897870002714342L, 0x123aeb9eafb86c25L, 0x30f1d5d5c145b895L, 
                -4953033604042954265L, 0x78cb67ecf931fa38L, -920137909863202916L, 0x52d66336fb279c74L, 0x505f33ac0afb4eaaL, -1682712826007985785L, 0x534974801e2d30bbL, -8273861206301250160L, 0x1f1a412891bc038eL, -2962551490920225208L, 0x74036c3a497732b7L, -8523485772611717717L, -5183265553382750L, -1789270636298447811L, -6471656072873752544L, -1458735953920612486L, 
                -1826563305001377480L, -5358963986493047656L, 0x563c6089140b6990L, 0x4c46cb2e391f5dd5L, -2795981259149962188L, 0x8ea70e42015aff5L, -2925749420550550287L, -4252676236223476327L, -2372897249057438062L, -2455723000952046826L, 0x6f2ef604a665ea04L, 0x4a8e0f0ff0e0dfb3L, -6490268738015937967L, -265982677241022690L, -1711898199407229911L, -2553549223344005918L, 
                -3655427155680827379L, 0x18d19a00d4db0717L, 0x34a0cfeda5f38101L, 0xbe77e518887caf2L, 0x1e341438b3c45136L, -2281187609587102471L, -12877901320348396L, 0x543dda228595c5cdL, 0x661f81fd99052a33L, -8703516059324417162L, 0x15227725418e5307L, -2134847759353728262L, 0x48a8b2126c13d9feL, -5774648161970196758L, 0x3d912bfc6d1898fL, 0x31b1aafa1b83f51bL, 
                -1032406685548103719L, 0x40a3a7d7fcd2ebacL, 0x1056136d0afbbcc5L, 0x7889e1dd9a6d0c85L, -3227632359902186326L, -6349410231276355429L, -4809500581665772080L, -7923309769729008016L, -6726740716384263588L, -4587792071496920925L, -658271017113840853L, 0x3537354511a8ac7dL, -3853851402329989932L, -8865288174312808228L, 0x79c62ce1cd672f18L, -8428026360225307604L, 
                -3404183201405868250L, 0x5a786a9b4ba9500cL, 0xe020336634c43f3L, -4504928615151511518L, 0x6a731ae3ec9baac2L, -9068448121725124008L, 0x67d4567691caeca5L, 0x1d94155c4875adb5L, 0x6d00fd985b813fdfL, 0x51286efcb774cd06L, 0x5e8834471fa744afL, -635956774299390418L, -4737535235939835750L, -1614809042241653147L, 0x726e4beb33df1964L, 0x703b000729199762L, 
                0x4631d816f5ef30a7L, -5151918184365513026L, 0x641793c37ed84b6cL, 0x7b21ed77f6e97d96L, 0x776306312ef96b73L, -5885490816789515276L, 0x53dbd7f286a3f8f8L, 0x16cadce74cfc1063L, 0x5c19bdfa52c6ddL, 0x68868f5d64d46ad3L, 0x3a9d512ccf1e186aL, 0x367e62c2385660aeL, -2064363959953346089L, 0x526c0773749abe6eL, 0x735ae5f9d09f734bL, 0x493fc7cc8a558ba8L, 
                -5712322089306707131L, 0x321958ba470a59bdL, -8850224129823554669L, -7989215126425784091L, 0x6e604f7d659ef19fL, -5072589324995998940L, -3677986556148923193L, 0x4727d9afbe11727bL, 0x7e950d0c0121b34dL, 0x756f435670ad471fL, -743704981880018871L, 0x4e87e09980b9957aL, 0x2acfa1df50aee355L, -2839477530259368618L, -3966384508771725354L, -3487534071112132806L, 
                -123994483119243460L, -1345606558677941971L, -8999779576894164844L, -4191785782441631580L, 0xf7f903717d06580L, 0x19f9bb13b8fdf27fL, -5639228995346094013L, 0x1c761ba38fff4012L, 0xd1530c4e2e21f3bL, -8555767913901511542L, -1938713800388260250L, 0x618bdb80bd736621L, 0x7d29bad68b574d0bL, -9098571702620193189L, 0x71c9c10bc07913fL, -4053543709501018729L, 
                -4330900206871259305L, -1512795427272957464L, -3102984968199159270L, -7389706432295929941L, -6638196300801425917L, -7112719166685012944L, 0x3f6ab7d500090fb4L, -7151449437793514816L, 0x3dee9d2dedbf42d1L, 0x330f49c87960a972L, -4129112553160565951L, 0xac59ec07c00369cL, -1202834617519492059L, -842133208882402856L, -8445297248460022090L, 0x2ffeab63989263f7L, 
                -8107400727032609416L, 0x5bd8f7644e634635L, 0x427a7315bf2dc900L, 0x17d0c4aa2125261cL, 0x3992486c93518e50L, -5418957485852076861L, 0x7c75d6202c5ddd8dL, -2611360075161572255L, 0x60b369d302032b19L, -3584187592496365262L, 0x6f3ddb9ddf65610L, -8168172799095912208L, 0x20b0fce62fcd496fL, 0x2c1b912358b0ee31L, -5583593033549110520L, -6297125087914569009L, 
                0xc6b18576aaadbc8L, -5305826774090122525L, -348051181029808153L, 0x4e4317f443b5bebL, 0x4b852d325939d0a6L, -3049381223523647492L, 0x309682b281c7d374L, -4980126173351398283L, -8303518980934164731L, -7446347735086057113L, 0x244b16b01076ff7cL, -522603252265687058L, 0x1f0d6758eee30da1L, -3911919600557704777L, -5210711461681408094L, 0x6290ae846b984fe1L, 
                -7719366717024918019L, 0x58a5bd1c5483affL, 0x63166cc142ba3c37L, -8234741283244511424L, -2231392863125672626L, -7060197492102713059L, 0x45ec2824cc7cd691L, 0x575b8359e62382c9L, -387802090031244907L, -3350046130045840024L, -2666808022981539793L, -6161723600240465717L, 0x269fcd4403b87588L, 0x1b91f5f728bdd1e0L, -1988727118208302602L, 0x7a1d7c218cf04adeL, 
                0x65623c29d79ce5ceL, 0x2368449096c00bb1L, -6081001307066006598L, -4889804522683628146L, -7324859595388608820L, -6885748294050442179L, 0x4ff188307df2239eL, 0x14d565b41a641183L, -1291632093432900094L, -7706153952057205239L, 0x59930254b9c80953L, 0x3bf299408930da6dL, -6244922308576078969L, -6818767823778904188L, 0x29142127352be9a0L, 0x76f0371fff4e7afbL, 
                0x239f450274f2228L, -4969938860820756853L, -4627442630994782527L, -3285648034072744413L, -7606118162332863056L, 0x55b5d38ae193bb81L, 0x693ae2d0a18b04b8L, 0x5c48b4ecadd5335fL, -183456705028906550L, 0x2577018134be98c4L, -1767231947251866451L, 0x28e11014da33e1b9L, 0x270cc59e226aa213L, 0x71495f756d1a5f60L, -7212422464109809801L, -5924618728816493121L, 
                0x904456173b29a82L, 0x58bc7a66c232bd5eL, -934965811117111118L, 0x41f639c6b6c9772aL, 0x216defe99fda35daL, 0x11640cc71c7be615L, -7799048643966905049L, -1584266091164108743L, -456002869645138839L, 0x741e768d0fd312d2L, 0x144b883ced652c6L, -4464375255980341934L, 0x1ae69633c3435a9dL, -7520293791609324052L, -8636597607271566304L, 0x37612fa66eeea746L, 
                0x6b4cb165f9cf0e5aL, 0x43aa1c06a0abfb4aL, 0x7f4dc26ff162796bL, 0x6cbacc8e54ed9b0fL, -6433392137177717442L, 0x2e25bc95b0a29d4fL, -8730608807451740020L, -2389358865336045484L, -9209652622095187875L, 0x3c81af70e94d9289L, 0x3eff6dda9e3100dbL, -5508531677782308793L, 0x123885528d17b87eL, -947428475416758718L, 0x44cefadcd54bf9a9L, 0x1312200e433c7ee6L, 
                -6918434684938959032L, -1095184559281703237L, -1411469442470588444L, 0x2ba7b67c0cec4e4cL, -6039522865352658195L, -3804467173852034031L, -6563710254104815428L, 0x5f513293d934fcefL, 0x5dc9645506e55444L, 0x50de418f317de40aL, 0x388cb31a69dde259L, 0x2db4a83455820a86L, -8065760984084440343L, 0x4df7f0b7b1498371L, -3014545685365689991L, 0x22fac097aa8d5c0eL, 
                -819712100864953445L, 0x487fd5c66ff29281L, -1683494792012715969L, 0x2c9b4be3d2fcce63L, -2720183745931134014L, 0x2fa165d2fe70ba66L, -6844377996819786796L, -4697838837464539535L, -3480123136110369641L, -5257202687841710057L, -3160671586143389472L, -8143604544638974599L, -7582212342885995579L, 0x66af4163375a9172L, 0x2174abdcca7127fbL, -5531319028708868287L, 
                -1132011872800708955L, -8244108713684067595L, -8100030830173699490L, -865042824158552761L, -1406263208487841571L, -743744098937138031L, -7255025749313877870L, 0x4975488358b74de8L, -6686350151342941087L, 0x702bbe481d2c6eeL, -8504163865352868456L, -6039198373597746942L, 0x1d2d3580172772edL, -1480681786698906867L, 0x5854ef8f63044326L, -7035658141633266754L, 
                -8022507636838873565L, -4480433668109774745L, 0x2051cfeea69ea624L, 0x13220f0a862e7e4fL, -3586772320324138908L, -2755027987269747529L, 0x685ad2238a03e7ccL, 0x66484b2ab2ff1dbL, -99820877092259348L, 0x5b13b9dd9c481854L, 0x15f0d475ed1509adL, 0xbebcd060ec79851L, -3058956174016989192L, -3379814835910611228L, -3936971176641920257L, -8723858077265400670L, 
                0x3485beb153677d5dL, -2514946515147142870L, -718211188705137671L, 0x518f643ba2d08c74L, -8623573777109189598L, -6383628662057423219L, 0x38047726bfec8e1aL, -6451625591996463702L, -5974472282720051687L, -4119613249555124729L, -4204805774663870152L, 0x16b9fa1fa58fd840L, 0x188ab1173ca74f18L, -6063481615036972513L, 0x3e0580ab134ae816L, 0x5f3b05b773645abbL, 
                0x2501a2be5575f2f6L, 0x1b2f74004e7e8ba9L, 0x1cd7580371e8d953L, 0x7f6ed89562764e30L, -5667455777910095811L, -6961112304229951815L, 0x6ecef04dd690f84cL, 0x4782275fff33af88L, -2011927023009527807L, -212234053999724107L, 0x4325a3342cdb396bL, -8437636414480207278L, -4364095106444861094L, -8843563141488759799L, -952547977505311611L, 0x63cfb4c133a39ebaL, 
                -8957588412064574366L, 0x3b9454c8fdb326b0L, 0x56f56a9e87ffd78cL, 0x2dc2940d99f42bc6L, -7424220229153493459L, 0x19a6e01e3ad852bfL, 0x42a99ccbdbd4b40bL, -6514007507455064743L, 0x366295e807d93186L, 0x6b48181bfaa1f773L, 0x1fec57e2157a0a1dL, 0x4667446af6201ad5L, -1867327214174801803L, -5119713925479725192L, 0x22713ed6ce22d11eL, 0x3057c1a72ec3c93bL, 
                -3799159280037322961L, -2614176868807805682L, 0x331fd92e600b9fcfL, -6586240258798896426L, -6280196637815307286L, -6878770741467980580L, -8649528727307138543L, 0x118808e5cbc96749L, -7419991789716909164L, -5769815365846261236L, 0x6509eadeeb3644a7L, 0x6c1ef1d3e8ef0edeL, -5059374975740702796L, -6705059931318638429L, 0x7b8496476197566fL, 0x7a5be3e6b65f069dL, 
                -476483339080012016L, -1232282160203339243L, 0x2b4bee4aa08b9bd0L, 0x6a56a63ec7b8894eL, 0x2121359ba34fef4L, 0x4cbf99f8283703fcL, 0x398071350caf30c8L, -3411623459852687238L, -1026352410626214551L, -8324492521276276327L, 0x5d1737a5dd1f7abdL, 0x4f53433c09a9fa80L, -393206988093480487L, 0x3fd9dcbc886ccb77L, -4593511655318796512L, 0x7dd00142f9d1dcdfL, 
                -8901650410637853864L, 0x23f8e7c5f3316503L, 0x32a2244e7e37339L, 0x5c87a5d750f5a74bL, 0x82b4cc43698992eL, -2336950474993240516L, 0x3270b8fc5bf86ddaL, 0x10ae72bb29b5dd76L, 0x576ac94e7700362bL, 0x1ad112dac61efb8fL, 0x691bc30ec5faa427L, -61815566784892605L, 0x3142368e30e53206L, 0x71380e31e02ca396L, -7670372790848096527L, -515956617046547146L, 
                -3963219078081420846L, 0x7578ae66004ddbe1L, 0x5833f01067be646L, -4957137534187579283L, 0x95f34c9a12b97f0L, 0x247ab64525d60ca8L, -2532211618462009391L, 0x4a2e14d4decad24dL, -4776658006885916949L, 0x2a7e70f7794301abL, -2381228231588757251L, 0x1078ec0a34c22c1L, -1882978417976974457L, 0x7ebb3a52bd9a330aL, 0x77697857aa7d6435L, 0x4e831603ae4c32L, 
                -1755823172185693422L, -7115222264497037070L, 0x28e06c18ea1141e6L, -3264392033958139096L, 0x26b75f6c446e9d83L, -5023951698716947073L, -2879016497062593138L, 0xe206d7f5f166044L, -2136777458168640962L, 0x723a1746b21dc0bcL, -4050239832011059757L, 0x7cac32883d261d9cL, 0x7690c26423ba942cL, 0x17e55524478042b8L, -2252284190053484385L, 0x4d289b5e67ab2da0L, 
                0x44862b9c8fbbfd31L, -5441254327629638811L, -9066842030330493037L, 0x4eb14655fb13dfd8L, 0x1ecbba0714e2a97bL, 0x6143459d5cde5f14L, 0x53a8fbf1d5f0ac89L, -7500176903196747008L, 0x622181a8d4fdb3f3L, -1604175089662029304L, 0x1411258643cce58aL, -7979034942316814172L, 0xd33d06565cf620fL, 0x54a48d489f219ca1L, -4305900099056973791L, -6236769450809946705L, 
                -2912898243239114769L, -2065740773420267803L, -3827177893057145596L, 0x129a50b3ac60bfa6L, -3648363291767490877L, -5756567784146095673L, 0x3de93cd5c295376cL, -5848717005041324781L, 0x2e60f512c0a07884L, -4882598382547103543L, 0x35269d9b163951ceL, 0xc7d6e2ad0cdb5faL, 0x59e86297d87f5733L, 0x298ef221898db0e7L, 0x55000029d1a5aa7eL, -8376542604899771579L, 
                -4412652237062246342L, -7724700941812371646L, 0xa1d73db22540456L, 0x4b6a0f9d9c4179aL, -1153572816294167456L, -592215260546165052L, -7150089944179092253L, 0x78bd1638218e5534L, -5552633324984327062L, -1298517758115136471L, 0x796ce5f2da23051bL, -6133576477421907076L, 0x3a493da0ee4b29aeL, -5341432795218012713L, -239890188217778377L, 0x70810b58105dc4b1L, 
                -2229320058079270256L, 0x524dcab5518a3f5cL, 0x3c9e85878451255bL, 0x4029828119bd34e2L, 0x74a05b6f5d3ceccbL, -5327756068839670070L, 0xff979d12f59e2acL, 0x6037da27e4f9cc50L, 0x5e92975a0df1847dL, -2995490164984896514L, 0x5032d6b87b568048L, -7334472845550608018L, -9212347808668562614L, -7786744047088363785L, 0x37ddbff44cce1555L, 0x4b95db5d4b99bd25L, 
                -7866665254384488512L, -352887593087136842L, 0x730c196946a4b9b2L, -9087549732707247512L, 0x64669a0f83b1a05fL, 0x27b3ff7d9644f48bL, -3716770017321781837L, 0x674f20b9bcebbe95L, 0x6f31238275655982L, 0x5ae488713e45cf05L, -4656265058823564969L, -1532696805485516055L, 0x454c6fe9f2c0c1cdL, 0x419cf6496412691cL, -3180601338503688336L, 0x6d0e60f5c3578a9eL, 
                0x5b0e608526323c55L, 0x1a46c1a9fa1b59f5L, -6205320776685678598L, 0x65ca5159db2955d7L, 0x5db0a76ce35afc2L, -9085229951450268347L, 0x528ef88ab6ac0a0dL, -6872877502453521409L, 0x430ddfb3ac48cd56L, -4272888574428519313L, 0x4ececfd8fbe2d05eL, 0x3ef56f10b39935f0L, 0xb22d6829cd619c6L, 0x17fd460a74df2069L, 0x6cf8cc8e8510ed40L, -2970083550513149273L, 
                0x61243d581a817049L, 0x48bacb6bbc163a2L, -2764213178345403342L, 0x7fddff5baaf410abL, -5950018878971805109L, -2186876610533351532L, -3100863505161590557L, -194921935069456237L, 0x247c20042aa4bfdaL, 0x96ea1c517d1327cL, -3068808746888436091L, 0x277da5c31221057dL, -7722098226173915145L, 0x64f0c51ccdc02281L, 0x3d33bcc4ff6189dbL, -2304212329100317967L, 
                -45936371244098582L, -5712723046817425393L, 0x7bd46a6a718d4b9fL, -3382299200423854708L, -3236816455951139535L, -4036747678298392505L, 0x4886ed1e5846c407L, 0x28cddb791eb70b04L, -4418018165041970817L, 0x5c9590452180f877L, 0x7a6bddfff370eb00L, -3580187736799586652L, -1447046360908978430L, 0x1dcc06cf76606f06L, -1956265881574637814L, -2856917834249223582L, 
                0x475b1d8732225f54L, 0x2d4fb51668ccb5feL, -6450920645962515936L, 0x53841c0d912d43a5L, 0x3b7eaa48bf12a4e8L, 0x781e0e47f22f1ddfL, -1156847972119148173L, 0x20d261d19dffb742L, 0x16a12b03062a2e39L, 0x1960eb2239650495L, 0x251c16fed50eb8b8L, -7295616781251116690L, -1363141094472255887L, 0x2d63194a6369570L, 0x5074f08394b1c987L, 0x70ba598c90b25ce1L, 
                0x794a15810b9742f6L, 0xd5925e9fcaf8c6cL, 0x3067716cd868744eL, -7995384159388863717L, 0x6a61bbdb5ac42f61L, -7831409025227614873L, -822907162794399275L, -1691135090558933875L, 0x34b1d3c675370cfdL, -2578904300750297763L, -3410711173298709536L, 0x8042a50b48b7eafL, -7379212936790430923L, -9035774148364232240L, 0x263b8307b7c54441L, 0x752f95f4fd6a6ca6L, 
                -7894221632442939675L, 0x2a8ab754a795d9eeL, -6610449357786147779L, 0x2c31334e19781208L, 0x4fa98d7ceaee6291L, 0x55c3862f665db309L, -4826152258144849421L, 0x46fe6cb840413f27L, 0x3fe03792df0cfa59L, -3465801151231271281L, -6359599548771540712L, -1926152657970122275L, -8468989295385802946L, -6500580506154635033L, 0x39412e2877b60728L, -6834670983768857044L, 
                -4845179353893108027L, 0x3ab66dd5dce1ce12L, -1849684427061896393L, 0x7d8f523481bfd216L, 0xf6f64fcec15f389L, 0x74efbe618b5b13c8L, -5990769681480860131L, -2503790423972405993L, 0x37e99257e7e061f8L, -409156412951274838L, -8377831951645714695L, -1152570669068554652L, -6327418252815316840L, -3725559206061705268L, 0x1b432f2cca1d3348L, -2441760721249263597L, 
                0x606602a047a7ddd6L, -3298979752616086841L, -7236283555339513389L, -1419193050620496778L, -93735727476260563L, -5905399081030416230L, 0x22cb8923ebfb4f43L, 0x69360d013cf7396dL, -8836566033099333598L, 0x73805bad01f784cL, 0x33e17a133852f546L, -2357506837776452040L, -5002739851233418934L, 0xce89fc76cfaadcdL, 0x5f9d4e0908339e34L, -1031349426815687751L, 
                0x6e3480f60f4a265fL, -1243211017071393764L, -2154628650105719635L, 0x57dfeff845c6d3c3L, 0x2f006b0bf62caaf2L, 0x62f479ef6f75ee78L, 0x11a55ad41c8916a9L, -997034324337437613L, 0x42f1c27b16b000e6L, 0x2b1f76749823c074L, 0x4b76eca3c2745360L, -8315628002795417155L, 0x14bcc93cf1ade66aL, -8609438560643873897L, -8207953325454440687L, -5432621302919780015L, 
                0x10168168c3f96b6bL, 0xe3d963b63cab0aeL, -8215608786054685932L, -609691062749569444L, 0x683e68af4e51dac1L, -3915792337899679783L, 0x3691e03f52a0f9d1L, 0x5ed86e46e1878e80L, 0x3c711a0e99d07150L, 0x5a0865b20c4e9310L, 0x56fbfc1fe4f0682eL, -1545475867304599653L, 0x71abfdb12379187aL, 0x2eb99de1bee77b9cL, 0x21ecc0ea33cf4523L, 0x59a4d7521805c7a1L, 
                0x3896f5eb56ae7c72L, -6168929569432701476L, -6973483665415634802L, -5197441416039796052L, 0x6b5541fd62492d92L, 0x6dc6dee8f92e4d5bL, 0x353f57abc4beea7eL, 0x735769d6da5690ceL, 0xa234aa642391484L, -650400159804944995L, -5124223765383482859L, 0x31ad9c1151341a4dL, 0x773c22a57bef5805L, 0x45c7561a07968633L, -498814760953987530L, -2709709455026140056L, 
                0x4c27a97f3bc334efL, 0x76621220e66b17f4L, -7604535187505054453L, -869656751120750718L, 0x409f753600c879fcL, 0x6d09a39b5926db6L, 0x6f83aeb0317ac588L, 0x1e6ca4a86381f21L, 0x66ff3462d19f3025L, 0x72207c24ddfd3bfbL, 0x4af6b6d3e2ece2ebL, -7162608250562934562L, 0x49ace597b09a8bc4L, -5508949737295341638L, 0x131b9373c57c2a75L, -5655908917112005032L, 
                -7100674984259216372L, 0x127fafdd937d11d2L, 0x29da3badc66d92e4L, -6718854486329987908L, 0x58c5134d82f6fe24L, 0x1c3ae3515b62274fL, -1655134238111203034L, -509741179510489141L, 0x3249d8f9c80046c9L, -9164935270648710301L, 0x1881539a116cf19eL, 0x5103f3f76bd52457L, 0x15b7e6f5ae47f7a8L, -2605395199060435761L, 0x44e55c410228bb1aL, -5312043978489901415L, 
                0x5d11882bb8aafc30L, -789946623649963734L, -8091303779971721549L, 0x677b942157dd025aL, -335263357675197259L, -8515348892102079999L, -7048796562806032069L, -233028078259189719L, 0x3f38c96ba582c52L, -3832073186324226638L, -4921235094493811069L, -5089093504863659344L, -5607539644671350465L, -8911681616096439592L, -4743899514573401058L, -7664321526450198170L, 
                -4599281686566632149L, 0x2388b1990df2a87bL, 0x7c8008fa1b4f37beL, 0x1f70d0c84d54e503L, 0x5490adec7ece57d4L, 0x2b3c27d9063a3aL, 0x7eaea3848030a2bfL, -4178722056535276608L, -8960148414521589626L, -4216952774774654326L, -5374970407177951367L, -6668788646589711127L, -2946910590031425822L, -8674853389405194592L, -7535980417822448849L, -6115357923114297461L, 
                -8065837346967928004L, -7487037274649424496L, -2061373546992596293L, -5783192355322733388L, 0x6345a0dc5fbbd519L, -8779488031786375734L, 0x1e5d01603f9c51ecL, 0x4de44006a15049b7L, -4653220181978985551L, 0x411218f2ef552bedL, -3815667051463559517L, -1779743783662362556L, -3650491565905270770L, -4529053496248414107L, -4021111997381021802L, -4350414089199835873L
             };
            T = numArray;
        }

        public Tiger()
        {
            this.Initialize();
        }

        public void Compress()
        {
            long a = 0L;
            long b = 0L;
            long[] x = null;
            long c = 0L;
            a = this.a;
            b = this.b;
            c = this.c;
            x = this.block;
            this.RoundABC(x[0], 5);
            this.RoundBCA(x[1], 5);
            this.RoundCAB(x[2], 5);
            this.RoundABC(x[3], 5);
            this.RoundBCA(x[4], 5);
            this.RoundCAB(x[5], 5);
            this.RoundABC(x[6], 5);
            this.RoundBCA(x[7], 5);
            this.Schedule(x);
            this.RoundCAB(x[0], 7);
            this.RoundABC(x[1], 7);
            this.RoundBCA(x[2], 7);
            this.RoundCAB(x[3], 7);
            this.RoundABC(x[4], 7);
            this.RoundBCA(x[5], 7);
            this.RoundCAB(x[6], 7);
            this.RoundABC(x[7], 7);
            this.Schedule(x);
            this.RoundBCA(x[0], 9);
            this.RoundCAB(x[1], 9);
            this.RoundABC(x[2], 9);
            this.RoundBCA(x[3], 9);
            this.RoundCAB(x[4], 9);
            this.RoundABC(x[5], 9);
            this.RoundBCA(x[6], 9);
            this.RoundCAB(x[7], 9);
            this.a ^= a;
            this.b -= b;
            this.c += c;
        }

        ~Tiger()
        {
        }

        protected override void HashCore(byte[] data, int nStart, int nSize)
        {
            byte[] destinationArray = null;
            int destinationIndex = 0;
            int num2 = 0;
            int length = 0;
            this.lLen += nSize;
            destinationArray = this.buf;
            destinationIndex = this.nBufPos;
            num2 = nStart + nSize;
            while (nStart < num2)
            {
                length = 0x40 - destinationIndex;
                if (length > nSize)
                {
                    length = nSize;
                }
                Array.Copy(data, nStart, destinationArray, destinationIndex, length);
                nStart += length;
                destinationIndex += length;
                nSize -= length;
                if (0x40 > destinationIndex)
                {
                    break;
                }
                this.ProcessBlock();
                destinationIndex = 0;
            }
            this.nBufPos = destinationIndex;
        }

        protected override byte[] HashFinal()
        {
            byte[] array = null;
            int index = 0;
            byte[] buf = null;
            index = this.nBufPos;
            array = this.buf;
            array[index] = 1;
            index++;
            if (0x38 <= index)
            {
                Array.Clear(array, index, 0x40 - index);
                this.ProcessBlock();
                index = 0;
            }
            Array.Clear(array, index, (0x40 - index) - 8);
            LongToBytes(this.lLen << 3, array, 0x38);
            this.ProcessBlock();
            buf = new byte[0x18];
            LongToBytes(this.a, buf, 0);
            LongToBytes(this.b, buf, 8);
            LongToBytes(this.c, buf, 0x10);
            return buf;
        }

        public override void Initialize()
        {
            this.a = 0x123456789abcdefL;
            this.b = -81985529216486896L;
            this.c = -1110518062304271993L;
            this.nBufPos = 0;
            this.lLen = 0L;
        }

        private static void LongToBytes(long lVal, byte[] buf, int nIdx)
        {
            int num = 0;
            num = nIdx + 8;
            while (nIdx < num)
            {
                buf[nIdx] = (byte) (lVal & 0xffL);
                lVal = lVal >> 8;
                nIdx++;
            }
        }

        public void ProcessBlock()
        {
            long[] block = null;
            byte[] buf = null;
            int index = 0;
            int num2 = 0;
            num2 = 0;
            block = this.block;
            buf = this.buf;
            while (num2 < 0x40)
            {
                block[index] = (((((((buf[num2 + 7] << 0x38) | ((buf[num2 + 6] & 0xffL) << 0x30)) | ((buf[num2 + 5] & 0xffL) << 40)) | ((buf[num2 + 4] & 0xffL) << 0x20)) | ((buf[num2 + 3] & 0xffL) << 0x18)) | ((buf[num2 + 2] & 0xffL) << 0x10)) | ((buf[num2 + 1] & 0xffL) << 8)) | (buf[num2] & 0xffL);
                num2 += 8;
                index++;
            }
            this.Compress();
        }

        public void RoundABC(long x, int mul)
        {
            long num = 0L;
            int num2 = 0;
            int num3 = 0;
            long[] t = null;
            t = T;
            num = this.c ^ x;
            num2 = (int) (num >> 0x20);
            num3 = (int) num;
            this.a -= ((t[num3 & 0xff] ^ t[((num3 >> 0x10) & 0xff) + 0x100]) ^ t[(num2 & 0xff) + 0x200]) ^ t[((num2 >> 0x10) & 0xff) + 0x300];
            this.b += ((t[((num3 >> 8) & 0xff) + 0x300] ^ t[((num3 >> 0x18) & 0xff) + 0x200]) ^ t[((num2 >> 8) & 0xff) + 0x100]) ^ t[(num2 >> 0x18) & 0xff];
            this.b *= mul;
            this.c = num;
        }

        public void RoundBCA(long x, int mul)
        {
            long num = 0L;
            int num2 = 0;
            int num3 = 0;
            long[] t = null;
            t = T;
            num = this.a ^ x;
            num2 = (int) (num >> 0x20);
            num3 = (int) num;
            this.b -= ((t[num3 & 0xff] ^ t[((num3 >> 0x10) & 0xff) + 0x100]) ^ t[(num2 & 0xff) + 0x200]) ^ t[((num2 >> 0x10) & 0xff) + 0x300];
            this.c += ((t[((num3 >> 8) & 0xff) + 0x300] ^ t[((num3 >> 0x18) & 0xff) + 0x200]) ^ t[((num2 >> 8) & 0xff) + 0x100]) ^ t[(num2 >> 0x18) & 0xff];
            this.c *= mul;
            this.a = num;
        }

        public void RoundCAB(long x, int mul)
        {
            long num = 0L;
            int num2 = 0;
            int num3 = 0;
            long[] t = null;
            t = T;
            num = this.b ^ x;
            num2 = (int) (num >> 0x20);
            num3 = (int) num;
            this.c -= ((t[num3 & 0xff] ^ t[((num3 >> 0x10) & 0xff) + 0x100]) ^ t[(num2 & 0xff) + 0x200]) ^ t[((num2 >> 0x10) & 0xff) + 0x300];
            this.a += ((t[((num3 >> 8) & 0xff) + 0x300] ^ t[((num3 >> 0x18) & 0xff) + 0x200]) ^ t[((num2 >> 8) & 0xff) + 0x100]) ^ t[(num2 >> 0x18) & 0xff];
            this.a *= mul;
            this.b = num;
        }

        public void Schedule(long[] x)
        {
            int index = 0;
            index = 0;
            x[index] -= x[7] ^ -6510615555426900571L;
            x[1] ^= x[0];
            index = 2;
            x[index] += x[1];
            index = 3;
            x[index] -= x[2] ^ (~x[1] << 0x13);
            x[4] ^= x[3];
            index = 5;
            x[index] += x[4];
            index = 6;
            x[index] -= x[5] ^ ((~x[4] >> 0x17) & 0x1ffffffffffL);
            x[7] ^= x[6];
            index = 0;
            x[index] += x[7];
            index = 1;
            x[index] -= x[0] ^ (~x[7] << 0x13);
            x[2] ^= x[1];
            index = 3;
            x[index] += x[2];
            index = 4;
            x[index] -= x[3] ^ ((~x[2] >> 0x17) & 0x1ffffffffffL);
            x[5] ^= x[4];
            index = 6;
            x[index] += x[5];
            index = 7;
            x[index] -= x[6] ^ 0x123456789abcdefL;
        }

        public static bool SelfTest()
        {
            ASCIIEncoding encoding = null;
            byte[] buffer = null;
            int index = 0;
            string s = null;
            byte[] buffer2 = null;
            Tiger tiger = null;
            int num2 = 0;
            byte[] buffer3 = null;
            s = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
            buffer3 = new byte[] { 
                15, 0x7b, 0xf9, 0xa1, 0x9b, 0x9c, 0x58, 0xf2, 0xb7, 0x61, 13, 0xf7, 0xe8, 0x4f, 10, 0xc3, 
                0xa7, 0x1c, 0x63, 30, 0x7b, 0x53, 0xf7, 0x8e
             };
            buffer2 = buffer3;
            tiger = new Tiger();
            tiger.Initialize();
            encoding = new ASCIIEncoding();
            buffer = tiger.ComputeHash(encoding.GetBytes(s));
            if (buffer.Length != buffer2.Length)
            {
                return false;
            }
            num2 = buffer2.Length - 1;
            for (index = 0; index <= num2; index++)
            {
                if (buffer[index] != buffer2[index])
                {
                    return false;
                }
            }
            return true;
        }

        public override bool CanTransformMultipleBlocks
        {
            get
            {
                return true;
            }
        }
    }
}

